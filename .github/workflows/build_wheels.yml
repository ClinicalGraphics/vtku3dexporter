name: Build Wheels

on:
  push:
    branches:
      - main
    tags:
       - '*'
  pull_request:
    branches:
      - main

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Only support 64-bit CPython >= 3.7
  # Only support macOS ARM 64-bit CPython >= 3.9 (older VTK wheels and SDKs not available)
  CIBW_SKIP: "cp27-* cp35-* cp36-* cp37-* cp312-* pp* *-manylinux_i686 *-musllinux_* *-win32 cp38-macosx_arm64"

  # Need to match the version used by VTK
  CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.10

  # In the Linux docker container, install the wheel SDKs to this location
  CIBW_ENVIRONMENT_LINUX: VTK_WHEEL_SDK_INSTALL_PATH=/vtk-wheel-sdk

  # Build both x86_64 and arm64 (through cross-compilation) wheels on Mac
  CIBW_ARCHS_MACOS: x86_64 arm64

  # VTK already fixes the rpaths, so we can skip this step for MacOS
  CIBW_REPAIR_WHEEL_COMMAND_MACOS:

  # On Linux, we only need auditwheel to add the tags to the wheel.
  # Unfortunately, auditwheel currently requires us to repair the wheel to
  # add the tags, even though we do not need to repair the wheel.
  # Thus, we need to set everything up for a wheel repair (including placing
  # the VTK libraries in `vtkmodules`, where they are expected to be at
  # runtime), perform the wheel repair, and then remove the added libraries.
  # Then the tags will have been added.
  CIBW_REPAIR_WHEEL_COMMAND_LINUX: .github/scripts/linux_repair_wheel.py {wheel} {dest_dir}

  # Pass these variables into the Linux docker containers
  CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS VTK_WHEEL_SDK_INSTALL_PATH

  # Run this before every build
  CIBW_BEFORE_BUILD: bash .github/scripts/cibw_before_build.sh

  CIBW_TEST_COMMAND: >
    pip install -r {package}/Testing/Python/requirements.txt &&
    pytest -v {package}/Testing/Python

  CIBW_TEST_COMMAND_WINDOWS: >
    pip install -r {package}/Testing/Python/requirements.txt &&
    pytest -v {package}/Testing/Python &&
    pyinstaller --noconfirm --distpath {package}/pyi/dist --workpath {package}/pyi/build --specpath {package}/Testing/Python {package}/Testing/Python/pyi_test_program.py &&
    {package}/pyi/dist/pyi_test_program/pyi_test_program.exe


# Use bash by default for the run command
defaults:
  run:
    shell: bash

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3

      - name: Install dependencies
        run: bash .github/scripts/install.sh

      - name: Build wheels
        uses: pypa/cibuildwheel@7e5a838a63ac8128d71ab2dfd99e4634dd1bca09 # v2.19.2
        with:
          output-dir: wheelhouse

      - name: Upload skbuild if an error occurred (for debugging)
        if: ${{ failure() }}
        uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # v4.3.2
        with:
          name: skbuild-${{ matrix.os }}
          path: ${{ github.workspace }}/_skbuild

      - uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # v4.3.2
        with:
          name: wheel-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: build_wheels
    name: Upload wheels to PyPI
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    # upload to PyPI on every tag push
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@8caf195ad4b1dee92908e23f56eeb0696f1dd42d # v4.1.5
        with:
          path: dist

      - name: Flatten artifact folder structure
        run: mv -v dist/*/* dist/.

      - uses: pypa/gh-action-pypi-publish@81e9d935c883d0b210363ab89cf05f3894778450 # v1.8.14
